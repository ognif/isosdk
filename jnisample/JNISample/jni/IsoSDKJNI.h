/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
#include <IsoSDKBurningLib.h>
#include <string>

/* Header for class IsoSDKJNI */

class IsoSDK {
public:

	IsoSDK(const TCHAR * licensekey);
	~IsoSDK();

	int lastError;

    std::string driveList();

};

#ifndef _Included_IsoSDKJNI
#define _Included_IsoSDKJNI
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     IsoSDKJNI
 * Method:    initializeIsoSDK
 * Signature: (Ljava/lang/String;)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_IsoSDKJNIPkg_IsoSDKJNI_initializeIsoSDK
  ( JNIEnv *, jobject, jstring );

/*
 * Class:     IsoSDKJNI
 * Method:    drivelist
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_IsoSDKJNIPkg_IsoSDKJNI_drivelist
  ( JNIEnv *, jobject );

JNIEXPORT jint JNICALL Java_IsoSDKJNIPkg_IsoSDKJNI_openDevice
  (JNIEnv *env, jobject jObj, jint lDeviceIndex);

JNIEXPORT jint JNICALL Java_IsoSDKJNIPkg_IsoSDKJNI_closeDevice
  ( JNIEnv *env, jobject jObj, jint lDeviceIndex );

JNIEXPORT jint JNICALL Java_IsoSDKJNIPkg_IsoSDKJNI_setBurnDevice
  ( JNIEnv *env, jobject jObj, jstring lDevice );

JNIEXPORT jint JNICALL Java_IsoSDKJNIPkg_IsoSDKJNI_setReadDevice
  ( JNIEnv *env, jobject jObj, jstring lDevice );

JNIEXPORT jint JNICALL Java_IsoSDKJNIPkg_IsoSDKJNI_addBurnDevice
  ( JNIEnv *env, jobject jObj, jstring lDevice );

JNIEXPORT jint JNICALL Java_IsoSDKJNIPkg_IsoSDKJNI_removeBurnDevice
  ( JNIEnv *env, jobject jObj, jstring lDevice );

JNIEXPORT jint JNICALL Java_IsoSDKJNIPkg_IsoSDKJNI_setProject
  ( JNIEnv *env, jobject jObj, jint lProjectType );

JNIEXPORT jint JNICALL Java_IsoSDKJNIPkg_IsoSDKJNI_addFile
  ( JNIEnv *env, jobject jObj, jstring lFilePath, jstring lDiscPath );

JNIEXPORT jint JNICALL Java_IsoSDKJNIPkg_IsoSDKJNI_addFolder
  ( JNIEnv *env, jobject jObj, jstring lFolderPath, jstring lDiscPath );

JNIEXPORT jint JNICALL Java_IsoSDKJNIPkg_IsoSDKJNI_createFolder
  ( JNIEnv *env, jobject jObj, jstring lFolderName, jstring lDiscPath );

JNIEXPORT jint JNICALL Java_IsoSDKJNIPkg_IsoSDKJNI_renameFile
  ( JNIEnv *env, jobject jObj, jstring lFilePath, jstring lNewFileName );

JNIEXPORT jint JNICALL Java_IsoSDKJNIPkg_IsoSDKJNI_removeFile
  ( JNIEnv *env, jobject jObj, jstring lFilePath, jstring lFileName );

JNIEXPORT jint JNICALL Java_IsoSDKJNIPkg_IsoSDKJNI_renameFolder
  ( JNIEnv *env, jobject jObj, jstring lFolderPath, jstring lNewFolderName );

JNIEXPORT jint JNICALL Java_IsoSDKJNIPkg_IsoSDKJNI_removeFolder
  ( JNIEnv *env, jobject jObj, jstring lDiscPath );

JNIEXPORT jint JNICALL Java_IsoSDKJNIPkg_IsoSDKJNI_dirExists
  ( JNIEnv *env, jobject jObj, jstring lPath );

JNIEXPORT jint JNICALL Java_IsoSDKJNIPkg_IsoSDKJNI_abort
  ( JNIEnv *env, jobject jObj );

JNIEXPORT jint JNICALL Java_IsoSDKJNIPkg_IsoSDKJNI_deleteProject
  ( JNIEnv *env, jobject jObj );

JNIEXPORT jint JNICALL Java_IsoSDKJNIPkg_IsoSDKJNI_rescanDevices
  ( JNIEnv *env, jobject jObj );

JNIEXPORT jint JNICALL Java_IsoSDKJNIPkg_IsoSDKJNI_getProjectType
  ( JNIEnv *env, jobject jObj );

JNIEXPORT jint JNICALL Java_IsoSDKJNIPkg_IsoSDKJNI_getActiveDevices
  ( JNIEnv *env, jobject jObj );

JNIEXPORT jint JNICALL Java_IsoSDKJNIPkg_IsoSDKJNI_getLastError
  ( JNIEnv *env, jobject jObj );

JNIEXPORT jint JNICALL Java_IsoSDKJNIPkg_IsoSDKJNI_doPrepare
  ( JNIEnv *env, jobject jObj );

JNIEXPORT jint JNICALL Java_IsoSDKJNIPkg_IsoSDKJNI_doBurn
  ( JNIEnv *env, jobject jObj );

JNIEXPORT jint JNICALL Java_IsoSDKJNIPkg_IsoSDKJNI_isDeviceReady
  ( JNIEnv *env, jobject jObj, jint lDeviceIndex );

JNIEXPORT jstring JNICALL Java_IsoSDKJNIPkg_IsoSDKJNI_getText
  ( JNIEnv *env, jobject jobj, jint lValue );

JNIEXPORT jint JNICALL Java_IsoSDKJNIPkg_IsoSDKJNI_setBurnSpeed
  ( JNIEnv *env, jobject jobj, jint lDevice, jint lValue );

JNIEXPORT jint JNICALL Java_IsoSDKJNIPkg_IsoSDKJNI_setReadSpeed
  (JNIEnv *env, jobject jobj, jint lDevice, jint lValue);

JNIEXPORT jint JNICALL Java_IsoSDKJNIPkg_IsoSDKJNI_getBurnSpeed
  ( JNIEnv *env, jobject jobj, jint lDevice);

JNIEXPORT jint JNICALL Java_IsoSDKJNIPkg_IsoSDKJNI_getReadSpeed
  (JNIEnv *env, jobject jobj, jint lDevice);

JNIEXPORT jint JNICALL Java_IsoSDKJNIPkg_IsoSDKJNI_getMaxReadSpeed
  (JNIEnv *env, jobject jobj, jint lDevice);

JNIEXPORT jint JNICALL Java_IsoSDKJNIPkg_IsoSDKJNI_getMaxBurnSpeed
  ( JNIEnv *env, jobject jobj, jint lDevice);

JNIEXPORT void JNICALL Java_IsoSDKJNIPkg_IsoSDKJNI_initializeCallbacks
	( JNIEnv *env, jclass clz, jstring dlgClassName);

JNIEXPORT void JNICALL Java_IsoSDKJNIPkg_IsoSDKJNI_clearCallbacks
	( JNIEnv *env, jclass clz );

JNIEXPORT jint JNICALL Java_IsoSDKJNIPkg_IsoSDKJNI_setImageFilePath
  ( JNIEnv *env, jobject jObj, jstring lPath );

JNIEXPORT jint JNICALL Java_IsoSDKJNIPkg_IsoSDKJNI_isImageWriterSelected
  ( JNIEnv *env, jobject jObj );

JNIEXPORT jint JNICALL Java_IsoSDKJNIPkg_IsoSDKJNI_saveLogToFile
  ( JNIEnv *env, jobject jObj, jstring lPath );

JNIEXPORT jint JNICALL Java_IsoSDKJNIPkg_IsoSDKJNI_doErase
  ( JNIEnv *env, jobject jObj, jboolean lFast, jboolean lEject );

JNIEXPORT jstring JNICALL Java_IsoSDKJNIPkg_IsoSDKJNI_getBurnDevice
  ( JNIEnv *env, jobject jobj );

JNIEXPORT jstring JNICALL Java_IsoSDKJNIPkg_IsoSDKJNI_getReadDevice
  (JNIEnv *env, jobject jobj);

JNIEXPORT jobject JNICALL Java_IsoSDKJNIPkg_IsoSDKJNI_getDriveInfo
  ( JNIEnv *env, jobject jobj );

JNIEXPORT jobject JNICALL Java_IsoSDKJNIPkg_IsoSDKJNI_getOptions
  ( JNIEnv *env, jobject jobj );

JNIEXPORT jint JNICALL Java_IsoSDKJNIPkg_IsoSDKJNI_setOptions
  ( JNIEnv *env, jobject jobj, jobject jstruct );

JNIEXPORT jobject JNICALL Java_IsoSDKJNIPkg_IsoSDKJNI_getBootInfo
  ( JNIEnv *env, jobject jobj );

JNIEXPORT jint JNICALL Java_IsoSDKJNIPkg_IsoSDKJNI_setBootInfo
  ( JNIEnv *env, jobject jobj, jobject jstruct );

JNIEXPORT jobject JNICALL Java_IsoSDKJNIPkg_IsoSDKJNI_getUDFOptions
  ( JNIEnv *env, jobject jobj );

JNIEXPORT jint JNICALL Java_IsoSDKJNIPkg_IsoSDKJNI_setUDFOptions
  ( JNIEnv *env, jobject jobj, jobject jstruct );

JNIEXPORT jobject JNICALL Java_IsoSDKJNIPkg_IsoSDKJNI_getUDFOptionsEx
  ( JNIEnv *env, jobject jobj );

JNIEXPORT jint JNICALL Java_IsoSDKJNIPkg_IsoSDKJNI_setUDFOptionsEx
  ( JNIEnv *env, jobject jobj, jobject jstruct );

JNIEXPORT jobject JNICALL Java_IsoSDKJNIPkg_IsoSDKJNI_getMediumInformation
  ( JNIEnv *env, jobject jobj );

JNIEXPORT jint JNICALL Java_IsoSDKJNIPkg_IsoSDKJNI_setISOInfoEx
  ( JNIEnv *env, jobject jobj, jobject jstruct );

JNIEXPORT jobject JNICALL Java_IsoSDKJNIPkg_IsoSDKJNI_getISOInfoEx
  ( JNIEnv *env, jobject jobj );

JNIEXPORT jint JNICALL Java_IsoSDKJNIPkg_IsoSDKJNI_lockDevice
  ( JNIEnv *env, jobject jObj, jint lDeviceIndex, jboolean lLock);

JNIEXPORT jint JNICALL Java_IsoSDKJNIPkg_IsoSDKJNI_burnISO
  ( JNIEnv *env, jobject jObj, jstring lFilePath);

JNIEXPORT jdouble JNICALL Java_IsoSDKJNIPkg_IsoSDKJNI_getImageSize
  ( JNIEnv *env, jobject jObj);

JNIEXPORT jobject JNICALL Java_IsoSDKJNIPkg_IsoSDKJNI_getSessionInformation
  ( JNIEnv *env, jobject jobj, jint nSession  );

JNIEXPORT jobject JNICALL Java_IsoSDKJNIPkg_IsoSDKJNI_getTrackInformation
  ( JNIEnv *env, jobject jobj, jint nTrack );

JNIEXPORT jint JNICALL Java_IsoSDKJNIPkg_IsoSDKJNI_closeSession
  ( JNIEnv *env, jobject jobj );

JNIEXPORT jstring JNICALL Java_IsoSDKJNIPkg_IsoSDKJNI_getErrorDevice
  ( JNIEnv *env, jobject jobj );

JNIEXPORT jobject JNICALL Java_IsoSDKJNIPkg_IsoSDKJNI_getDeviceInformationEx
  ( JNIEnv *env, jobject jobj );

JNIEXPORT jint JNICALL Java_IsoSDKJNIPkg_IsoSDKJNI_writeTrackToFile
  ( JNIEnv *env, jobject jobj, jstring ltargetPath, jint nTrack, jint nFormat );

JNIEXPORT jint JNICALL Java_IsoSDKJNIPkg_IsoSDKJNI_setFileAttributes
  ( JNIEnv *env, jobject jobj, jstring lfilePath, jobject jstruct );

JNIEXPORT jint JNICALL Java_IsoSDKJNIPkg_IsoSDKJNI_clearAll
  ( JNIEnv *env, jobject jobj );

JNIEXPORT jstring JNICALL Java_IsoSDKJNIPkg_IsoSDKJNI_getTrackISRC
  ( JNIEnv *env, jobject jobj, jint nTRack );

JNIEXPORT jstring JNICALL Java_IsoSDKJNIPkg_IsoSDKJNI_getImageFilePath
  ( JNIEnv *env, jobject jobj );

JNIEXPORT jint JNICALL Java_IsoSDKJNIPkg_IsoSDKJNI_setRegionCode
  ( JNIEnv *env, jobject jobj, jint nrgCode );

JNIEXPORT jint JNICALL Java_IsoSDKJNIPkg_IsoSDKJNI_isValidVideoTsFolder
  ( JNIEnv *env, jobject jobj, jstring lDVDPath );

JNIEXPORT jint JNICALL Java_IsoSDKJNIPkg_IsoSDKJNI_createDeviceCapabilitiesHandle
  ( JNIEnv *env, jobject jobj);

JNIEXPORT jint JNICALL Java_IsoSDKJNIPkg_IsoSDKJNI_releaseDeviceCapabilitiesHandle
  ( JNIEnv *env, jobject jobj);

JNIEXPORT jint JNICALL Java_IsoSDKJNIPkg_IsoSDKJNI_analyzeDeviceCapabilitie
  ( JNIEnv *env, jobject jobj, jlong lCapability);

JNIEXPORT jint JNICALL Java_IsoSDKJNIPkg_IsoSDKJNI_createImage
  ( JNIEnv *env, jobject jobj, jobject jstruct, jint nType);

JNIEXPORT jint JNICALL Java_IsoSDKJNIPkg_IsoSDKJNI_checkFormat
  ( JNIEnv *env, jobject jobj, jint nFormat );

JNIEXPORT jint JNICALL Java_IsoSDKJNIPkg_IsoSDKJNI_createCDTextReader
  ( JNIEnv *env, jobject jobj );

JNIEXPORT jint JNICALL Java_IsoSDKJNIPkg_IsoSDKJNI_releaseCDTextReader
  ( JNIEnv *env, jobject jobj );

JNIEXPORT jstring JNICALL Java_IsoSDKJNIPkg_IsoSDKJNI_getCDTextTrackString
  ( JNIEnv *env, jobject jobj, jint nTrack, jint nCDTid );

JNIEXPORT jstring JNICALL Java_IsoSDKJNIPkg_IsoSDKJNI_getCDTextDiscString
  ( JNIEnv *env, jobject jobj, jint nCDTid );

JNIEXPORT jint JNICALL Java_IsoSDKJNIPkg_IsoSDKJNI_playAudioTrack
  ( JNIEnv *env, jobject jobj, jint nTrack );

JNIEXPORT jint JNICALL Java_IsoSDKJNIPkg_IsoSDKJNI_setFileTimes
  ( JNIEnv *env, jobject jobj, jstring lFilePath, jstring tCreation, jstring tModification, jstring tAccess);

//ReadSectors

//SetDVDVideoOptions
//GetDVDVideoOptions

#ifdef __cplusplus
}
#endif
#endif
